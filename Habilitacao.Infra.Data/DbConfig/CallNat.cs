#region * * * P L E A S E   D O   N O T   M O D I F Y * * *
/***************************************************************************
** Module name   : Callnat.cs
** Description   : Client Stub File for .NET (10.1.0.0)
**
**                 * * *  P L E A S E   D O   N O T   M O D I F Y  * * *
**
** Author        : Generated by Software AG EntireX IDL Compiler
** Template      : csharp_client.tpl for C#
** Platform      : .NET-able Platforms
** Usage         : <use wizard>
***************************************************************************/
#endregion
#region parameters
/**************************************************************************
** sanitize C#
** Broker       : localhost:1971
** Service      : RPC/SRV1/CALLNAT
** ATOSTRING       : String
** A1TOCHAR        : false
** B1TOBYTE        : false
** TRIM            : true
** SANITIZE        : true
***************************************************************************/
#endregion
#region required namespaces
using System;
using System.Text;
using System.Runtime.InteropServices;
using SoftwareAG.EntireX.NETWrapper.Runtime;
#endregion

#region AssemblyInfo
#if USE_ASSEMBLY_INFO
using System.Reflection ;
[assembly: AssemblyTitle("EntireX .NET Wrapper Client")]
[assembly: AssemblyDescription("EntireX .NET Wrapper Client")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Software AG")]
[assembly: AssemblyProduct("EntireX Communicator")]
[assembly: AssemblyCopyright("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
[assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyDelaySign(false)]
[assembly: AssemblyKeyFile("")]
[assembly: AssemblyKeyName("")]
#endif
#endregion

namespace Habilitacao.Infra.Data.DbConfig.SoftwareAG.EntireX.NETWrapper.Generated.CallNat
{
    [EntireXVersion("10.1.0.0")]
    [Library("CallNat")]
    [Broker("localhost:1971")]
    [Service("RPC/SRV1/CALLNAT")]
    class CallNat : ServiceHolder
    {
        #region 	Constructor(s) etc for LIBRARY 'CallNat'

        public CallNat() : base() { }
        public CallNat(Broker broker) : base(broker) { }
        public CallNat(Service service) : base(service) { }

        #endregion

        #region Method/Function for LIBRARY 'MOBILE' PROGRAM 'S53IT001' OK - Validar Processo de Habilita��o

        [Program("S53IT001")]
        public void S53it001(
     [SendAs(IdlType.N, preDecimal = 11, postDecimal = 0)][In] decimal cpf,
     [SendAs(IdlType.N, preDecimal = 2, postDecimal = 0)][In] decimal servico,
     [SendAs(IdlType.A, Length = 2f, Trim = true)][Out] out string categoria,
     [SendAs(IdlType.A, Length = 4f, Trim = true)][Out] out string requer,
     [SendAs(IdlType.A, Length = 44f, Trim = true)][Out] out string nomeCandidato,
     [SendAs(IdlType.N, preDecimal = 9, postDecimal = 0)][Out] out decimal processoAberto,
     [SendAs(IdlType.A, Length = 1f, Trim = true)][Out] out string tipoProcesso,
     [SendAs(IdlType.A, Length = 44f, Trim = true)][Out] out string nomePaiParameter,
     [SendAs(IdlType.A, Length = 44f, Trim = true)][Out] out string nomeMaeParameter,
     [SendAs(IdlType.N, preDecimal = 1, postDecimal = 0)][Out] out decimal sexoParameter,
     [SendAs(IdlType.N, preDecimal = 2, postDecimal = 0)][Out] out decimal escolaridadeParameter,
     [SendAs(IdlType.A, Length = 5f, Trim = true)][Out] out string localidadeNascParameter,
     [SendAs(IdlType.A, Length = 2f, Trim = true)][Out] out string ufNaturalidadeParameter,
     [SendAs(IdlType.N, preDecimal = 1, postDecimal = 0)][Out] out decimal nacionalidadeParameter,
     [SendAs(IdlType.N, preDecimal = 1, postDecimal = 0)][Out] out decimal provaCursoRenovacao,
     [SendAs(IdlType.A, Length = 1f, Trim = true)][Out] out string deficienciaFisica,
     [SendAs(IdlType.N, preDecimal = 1, postDecimal = 0)][In, Out] ref decimal tipoIden,
     [SendAs(IdlType.A, Length = 13f, Trim = true)][In, Out] ref string ident,
     [SendAs(IdlType.A, Length = 2f, Trim = true)][In, Out] ref string digito,
     [SendAs(IdlType.A, Length = 10f, Trim = true)][In, Out] ref string orgao,
     [SendAs(IdlType.A, Length = 2f, Trim = true)][In, Out] ref string uf,
     [SendAs(IdlType.N, preDecimal = 8, postDecimal = 0)][Out] out decimal dataNascimentoParameter,
     [SendAs(IdlType.A, Length = 2f, Trim = true)][Out] out string ufPrimHabParameter,
     [SendAs(IdlType.N, preDecimal = 8, postDecimal = 0)][Out] out decimal dataPrimHabParameter,
     [SendAs(IdlType.A, Length = 10f, Trim = true)][Out] out string dataValidadeCnh,
     [SendAs(IdlType.A, Length = 10f, Trim = true)][Out] out string dataExameValido,
     [SendAs(IdlType.A, Length = 1f, Trim = true)][Out] out string flagCnhDefinitiva,
     [SendAs(IdlType.A, Length = 1f, Trim = true)][In, Out] ref string transfJurisdicao,
     [SendAs(IdlType.A, Length = 1f, Trim = true)][Out] out string atividadeRemunerada,
     [SendAs(IdlType.A, Length = 1f, Trim = true)][Out] out string rgDifereBinco,
     [SendAs(IdlType.N, preDecimal = 3, postDecimal = 0)][Out] out decimal contProcessosSuspensao,
     [SendAs(IdlType.N, preDecimal = 11, postDecimal = 0)][Out] out decimal registro,
     [SendAs(IdlType.A, Length = 44f, Trim = true)][In, Out] ref string nomeSocialParm,
     [SendAs(IdlType.A, Length = 44f, Trim = true)][In, Out] ref string filiacaoAfetiva1Parm,
     [SendAs(IdlType.A, Length = 44f, Trim = true)][In, Out] ref string filiacaoAfetiva2Parm,
     [SendAs(IdlType.N, preDecimal = 1, postDecimal = 0)][Out] out decimal erro,
     [SendAs(IdlType.A, Length = 500f, Trim = true)][Out] out string mensagem
   )
        {
            StringBuilder categoriaHolder = new StringBuilder();
            StringBuilder requerHolder = new StringBuilder();
            StringBuilder nomeCandidatoHolder = new StringBuilder();
            decimal localprocessoAbertoRef = 0;
            StringBuilder tipoProcessoHolder = new StringBuilder();
            StringBuilder nomePaiParameterHolder = new StringBuilder();
            StringBuilder nomeMaeParameterHolder = new StringBuilder();
            decimal localsexoParameterRef = 0;
            decimal localescolaridadeParameterRef = 0;
            StringBuilder localidadeNascParameterHolder = new StringBuilder();
            StringBuilder ufNaturalidadeParameterHolder = new StringBuilder();
            decimal localnacionalidadeParameterRef = 0;
            decimal localprovaCursoRenovacaoRef = 0;
            StringBuilder deficienciaFisicaHolder = new StringBuilder();
            decimal localtipoIdenRef = tipoIden;
            StringBuilder identHolder = new StringBuilder(ident);
            StringBuilder digitoHolder = new StringBuilder(digito);
            StringBuilder orgaoHolder = new StringBuilder(orgao);
            StringBuilder ufHolder = new StringBuilder(uf);
            decimal localdataNascimentoParameterRef = 0;
            StringBuilder ufPrimHabParameterHolder = new StringBuilder();
            decimal localdataPrimHabParameterRef = 0;
            StringBuilder dataValidadeCnhHolder = new StringBuilder();
            StringBuilder dataExameValidoHolder = new StringBuilder();
            StringBuilder flagCnhDefinitivaHolder = new StringBuilder();
            StringBuilder transfJurisdicaoHolder = new StringBuilder(transfJurisdicao);
            StringBuilder atividadeRemuneradaHolder = new StringBuilder();
            StringBuilder rgDifereBincoHolder = new StringBuilder();
            decimal localcontProcessosSuspensaoRef = 0;
            decimal localregistroRef = 0;
            StringBuilder nomeSocialParmHolder = new StringBuilder(nomeSocialParm);
            StringBuilder filiacaoAfetiva1ParmHolder = new StringBuilder(filiacaoAfetiva1Parm);
            StringBuilder filiacaoAfetiva2ParmHolder = new StringBuilder(filiacaoAfetiva2Parm);
            decimal localerroRef = 0;
            StringBuilder mensagemHolder = new StringBuilder();
            service.Send(
              this.GetType().GetMethod("S53it001"),
              cpf,
              servico,
              categoriaHolder,
              requerHolder,
              nomeCandidatoHolder,
              new Ref(ref localprocessoAbertoRef),
              tipoProcessoHolder,
              nomePaiParameterHolder,
              nomeMaeParameterHolder,
              new Ref(ref localsexoParameterRef),
              new Ref(ref localescolaridadeParameterRef),
              localidadeNascParameterHolder,
              ufNaturalidadeParameterHolder,
              new Ref(ref localnacionalidadeParameterRef),
              new Ref(ref localprovaCursoRenovacaoRef),
              deficienciaFisicaHolder,
              new Ref(ref localtipoIdenRef),
              identHolder,
              digitoHolder,
              orgaoHolder,
              ufHolder,
              new Ref(ref localdataNascimentoParameterRef),
              ufPrimHabParameterHolder,
              new Ref(ref localdataPrimHabParameterRef),
              dataValidadeCnhHolder,
              dataExameValidoHolder,
              flagCnhDefinitivaHolder,
              transfJurisdicaoHolder,
              atividadeRemuneradaHolder,
              rgDifereBincoHolder,
              new Ref(ref localcontProcessosSuspensaoRef),
              new Ref(ref localregistroRef),
              nomeSocialParmHolder,
              filiacaoAfetiva1ParmHolder,
              filiacaoAfetiva2ParmHolder,
              new Ref(ref localerroRef),
              mensagemHolder
            );
            categoria = categoriaHolder.ToString();
            requer = requerHolder.ToString();
            nomeCandidato = nomeCandidatoHolder.ToString();
            processoAberto = localprocessoAbertoRef;
            tipoProcesso = tipoProcessoHolder.ToString();
            nomePaiParameter = nomePaiParameterHolder.ToString();
            nomeMaeParameter = nomeMaeParameterHolder.ToString();
            sexoParameter = localsexoParameterRef;
            escolaridadeParameter = localescolaridadeParameterRef;
            localidadeNascParameter = localidadeNascParameterHolder.ToString();
            ufNaturalidadeParameter = ufNaturalidadeParameterHolder.ToString();
            nacionalidadeParameter = localnacionalidadeParameterRef;
            provaCursoRenovacao = localprovaCursoRenovacaoRef;
            deficienciaFisica = deficienciaFisicaHolder.ToString();
            tipoIden = localtipoIdenRef;
            ident = identHolder.ToString();
            digito = digitoHolder.ToString();
            orgao = orgaoHolder.ToString();
            uf = ufHolder.ToString();
            dataNascimentoParameter = localdataNascimentoParameterRef;
            ufPrimHabParameter = ufPrimHabParameterHolder.ToString();
            dataPrimHabParameter = localdataPrimHabParameterRef;
            dataValidadeCnh = dataValidadeCnhHolder.ToString();
            dataExameValido = dataExameValidoHolder.ToString();
            flagCnhDefinitiva = flagCnhDefinitivaHolder.ToString();
            transfJurisdicao = transfJurisdicaoHolder.ToString();
            atividadeRemunerada = atividadeRemuneradaHolder.ToString();
            rgDifereBinco = rgDifereBincoHolder.ToString();
            contProcessosSuspensao = localcontProcessosSuspensaoRef;
            registro = localregistroRef;
            nomeSocialParm = nomeSocialParmHolder.ToString();
            filiacaoAfetiva1Parm = filiacaoAfetiva1ParmHolder.ToString();
            filiacaoAfetiva2Parm = filiacaoAfetiva2ParmHolder.ToString();
            erro = localerroRef;
            mensagem = mensagemHolder.ToString();
        }
        #endregion
    }
}
